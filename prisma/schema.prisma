generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum type {
  video
  text
  image
  audio
  poll
  game
}

enum status {
  public
  private
  unlisted
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  password   String
  name       String?
  bio        String?
  avatar     String?
  coverPhoto String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  posts      Post[]
  likes      Like[]
  status     status    @default(public)
  comments   Comment[]
  followers  Follow[]  @relation("UserFollowers") // Unique relation name for followers
  following  Follow[]  @relation("UserFollowing") // Unique relation name for following
}

model Post {
  id         Int       @id @default(autoincrement())
  content    String
  image      String?
  contentURL String?
  type       type?     @default(text)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  status     status    @default(public)
  likes      Like[]
  comments   Comment[]
  tags       Tag[]     // Added for tags on posts
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  reaction  String?  // Added for different reactions
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   // Many-to-many relationship with Post
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())
  @@unique([followerId, followingId])
}
